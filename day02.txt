git으로 버전관리하기
    1. local repository만들기
        1. cmd 혹은 terminal로 local repository로 만들고 싶은
        폴더로 이동하기
            cd 명령어를 활용하여 이동
            ex) cd "폴더이름/폴더이름/폴더이름"

            ..은 상위폴더를 의미한다
            ex) cd ../../폴더1
            --> 현재위로부터 상위폴더 의 상위폴더 안의 폴더1 로이동

    visual studio code terminal 활용하기
        상단 terminal 탭 > New terminal

        visual studio code terminal 종료하기
            terminal 창 쓰레기통 아이콘 클릭
            (x 버튼을 클릭하면 화면상에서만 안보일 뿐 터미널이 종료된 것이 아니다)

    window 사용자 : git bash here
        원하는 폴더로 들어가서 마우스 우클릭
        github bash here 클릭

    terminal, cmd, git bash 사용이 완료가 되면
    잘 종료를 시켜줘야 한다

    2. git init
        git init 명령어를 실행아면 해당 폴더가 버전관리를 할 수 있는 폴더로 변경된다(로컬저장소)
        .git 이라는 폴더가 새롭게 생성이 되면 성공!
        .git 은 숨김폴더로서 보통은 안보이게 설정되어 있으며
        윈도우의 경우에는 파일탐색기 보기 > 숨긴항목보기에 체크
        
        맥의 경우에는 command . shift 를 누르면 볼 수 있다

        .git 폴더 속에는 버전관리를 위한 여러가지 폴더와 파일들이 들어있으며 
        .git 폴더는 삭제하면 버전관리를 할 수 있는 깃 저장소가 아닌 폴더가 되어버린다
        (이때는 git init을 다시 실행)
 
        git init은 깃 저장소로 만들기 위해 최초 1회 만 실행
    
2. git stage에 수정사항 올리기

깃의 작동원리
    깃은 논리적으로 working tree / stage / repository 로 나누어 파일을 관리한다

working tree
    실질적으로 내가 작업하는 작업공간
    작업공간에서 새롭게 만든 파일들은 기본적으로 git 이 추적하지 못하는 상태(untracted)
    스테이지에 올라가지 않은 상태(unstage)

stage
    파일을 stage에 올리는 방법(tracked 상태로 만드는 방법)
        git add 파일이름
    명령어를 사용한다

    add 명령어가 적용된 파일들은 모두 tracked 상태가 되며 stage에 올라간 상태가 된다
    니때 stage에 올라가있는 파일을 수정(추가, 삭제)했다면 add를 실행했을 당시와
    다른 상태가 된다 이름 인지하고 modifed 상태가 되었다고 판단하며 
    modifed 된 상태는 tracked 상태지만 unstage 상태

stage에 올라와있는 상황을 영구적으로 저장: commit
    커밋을 하게 되면 "stage에 올라와있는 상태" 그대로 영구 저장된다 

git commit
    실행하면 커밋 메시지르 작성할 수 있는 에디터가 열린다
    이 곳에다가 i 를 눌러서 끼워널기(INSERT) 상태로 만들고, 커밋 메시지를 작성 한 후
    다 작성되면 
    :wq 를 입력하고 엔터를 눌러 나온다

git commit -m "커밋 메시지(사용자 설정)"
    커밋을 할 때 작성하고 싶은 메시지를 상따옴표 안쪽에 써준다
    이때, commit은 stage에 올라와있는 상태가 영구적으로 저장된다

-a 옵션
    git commit -a
        add는 자동으로 되고, 커밋메시지 작성하는 에디터 열림
    git commit -am "카밋메시지"
        add도 자동 커밋메시지도 간단히 작성

git status
    git 저장소의 상태를 확인해줌

git add 파일이름
    확장자 이름까지 써줘야함(txt, html, css 등)
    해당파일을 stage에 올려줘
    untracted(git 저장소 내에서 새롭게 만든 파일들) 파일들은 tracked 상태로 변경되고,
    stage에 해당 내용들이 올라간다(stage 상태가 된다)

    파일 이름 자리에 * 을 사용하면 모든을 의미한다
    (git add *)


git 사용자 계정 정보 입력하기(전역정보)
    git config --global user.name "닉네임"
        닉네임 설정
    git config --global user.email "이메일주소"
        이메일 설정

작업공간 내의 git 사용자 계정 정보 입력(입력 안되어있으면 전역에 입력된 닉네임과 이메일을 따라간다)
    git config user.name "닉네임"
    git config user.email "이메일주소"


계정정보 확인하기
    전역 설정 확인
        git config --global user.name
        git config --global user.email

    해당 저장소 설정 확인
        git config user.name
        git config user.email
